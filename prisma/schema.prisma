generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String?
  phone              String   @unique
  email              String?  @unique
  password           String 
  countTrariff       Int? @default(0) @map("count_trariff")
  isPaid             Boolean @default(false)
  role               Role     @default(USER) 
  accessDevice       String? @map("access_device")
  startinglDateLimit DateTime? @map("startingl_date_limit")

  devices        Device[]
  promoCodes     PromoCode[]
  promoUserCodes PromoUserCode[]
  transactions   Transaction[]
  notifications  Notification[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([id])
  @@unique([id, phone, email])
  @@map("users")
}

model Device {
  id             String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  os             Os
  osVersion      String?  @map("os_version")
  deviceId       String   @map("device_id")  @unique
  deviceName     String?  @map("device_name")
  deviceToken    String?  @map("device_token")
  isActive       Boolean  @default(true)  @map("is_active")
  isBlocked      Boolean  @default(false) @map("is_blocked")
  isRegistered   Boolean  @default(false) @map("is_registered") 
  manufacturer   String?  
  model          String?
  appVersion     String?  @map("app_version")
  appBuild       String?  @map("app_build")
  appName        String?  @map("app_name")
  appVersionCode String?  @map("app_version_code")
  appVersionName String?  @map("app_version_name")

  userId     String?  @db.Uuid @map("user_id")
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt  @map("updated_at")

  @@id([id])
  @@unique([id, deviceId])
  @@map("devices")
}

model Question {
  id                Int              @id @default(autoincrement())
  question_uz       String           @db.VarChar(512)
  question_ru       String           @db.VarChar(512)
  question_en       String           @db.VarChar(512)
  questionSetNumber Int
  testNumber        Int
  imgUrl            String?          @db.VarChar(512)
  comment           String?          @db.VarChar(512)
  expertComment     String?          @db.VarChar(512) @map("expert_commit")
  commentRu        String?          @db.VarChar(512) @map("comment_ru")
  expertCommentRu  String?          @db.VarChar(512) @map("expert_commit_ru")

  optionsUz        optionsUz[]
  optionsRu        optionsRu[]
  optionsEn        optionsEn[]

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model optionsUz {
  id                Int              @id @default(autoincrement())
  value             String           @db.VarChar(512)
  isCorrect         Boolean

  questionId        Int
  question          Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("options_uz")
}

model optionsRu {
  id                Int              @id @default(autoincrement())
  value             String           @db.VarChar(512)
  isCorrect         Boolean

  questionId        Int
  question          Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("options_ru")
}

model optionsEn {
  id                Int              @id @default(autoincrement())
  value             String           @db.VarChar(512)
  isCorrect         Boolean

  questionId        Int
  question          Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("options_en")
}

model Banner {
  id           String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String @db.VarChar(255)
  description  String? @db.VarChar(512)
  imageUrl     String? @db.VarChar(512)
  link         String? @db.VarChar(512)
  isActive     Boolean @default(true)
  isBlocked    Boolean @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([id])
  @@map("banners")
}

model Tariff {
  id           String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String @db.VarChar(255)
  price        Int @default(0)
  day          Int   

  transaction Transaction[]

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt      @map("updated_at")

  @@id([id])
  @@map("tariffs")
}

model PromoCode {
  id           String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  secretKey    String @db.VarChar(16) @map("secret_key")
  disCount     Int? @map("dis_count")
  bonusDays    Int? @map("bonus_days") @default(10)
  agentBonus   Int? @map("agent_bonus")

  userId     String?  @db.Uuid @map("user_id")
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade) 

  promoUserCodes PromoUserCode[]
  transaction Transaction[]

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt      @map("updated_at")

  @@id([id])
  @@map("promo_code")
}

model PromoUserCode {
  id           String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String?  @db.Uuid @map("user_id")
  promoCodeId  String? @db.Uuid @map("promo_code_id")

  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  promoCode    PromoCode? @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt      @map("updated_at")

  @@id([id])
  @@map("promo_user_code")
}

model Notification {
  id           String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String @db.VarChar(255)
  body         String @db.VarChar(512)
  titleRu      String? @db.VarChar(255) @map("title_ru")
  bodyRu       String? @db.VarChar(512) @map("body_ru")
  imageUrl     String? @db.VarChar(128) @map("image_url")
  link         String? @db.VarChar(128)
  isActive     Boolean @default(true) @map("is_active")

  userId       String?  @db.Uuid @map("user_id")
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt      @map("updated_at")

  @@id([id])
  @@map("notifications")
}

model Transaction {
  id            String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clickTransId  BigInt?  @map("click_trans_id")
  amount        Float?
  prepareID     Int?      @map("prepare_id")
  paymentType   PaymentType? @map("payment_type")
  userId        String @db.Uuid @map("user_id")
  status        TransactionStatus?
  tariffId      String @db.Uuid @map("tariff_id")
  promocodeId   String? @db.Uuid @map("promocode_id")

  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade) 
  tariff     Tariff  @relation(fields: [tariffId], references: [id], onDelete: Cascade) 
  promoCode  PromoCode? @relation(fields: [promocodeId], references: [id], onDelete: Cascade)

  cancelTime   DateTime? @map("cancel_time")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt      @map("updated_at")
  
  @@id([id])
  @@map("transactions")
}

enum Os {
  ANDROID
  IOS
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum PaymentType {
  PAYME
  CLICK
}

enum TransactionStatus {
  Paid
  Pending
  PendingCanceled
  PaidCanceled
}
