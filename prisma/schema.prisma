generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  phone      String @unique
  email      String? @unique
  password   String 
  blance     Decimal? @default(0.00) @db.Decimal(10, 2)
  role       Role    @default(USER)
  isRegister Boolean @default(false)
  lastAccountTranferDate DateTime? 
  accessUntilDate DateTime? 

  devices   Device[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id])
  @@unique([id, phone, email])
  @@map("users")
}

model Device {
  id         String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  os         Os
  osVersion  String?
  deviceId   String @unique
  deviceName String?
  deviceToken String? @unique
  isActive   Boolean @default(true) 
  isBlocked  Boolean @default(false)
  isRegistered Boolean @default(false)  
  manufacturer String?
  model      String?
  appVersion String?
  appBuild   String?
  appName    String?
  appVersionCode String?
  appVersionName String?

  userId     String? @db.Uuid
  user       User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id])
  @@unique([id, deviceId])
  @@map("devices")
}

model Question {
  id                Int              @id @default(autoincrement())
  question_uz       String           @db.VarChar(512)
  question_ru       String           @db.VarChar(512)
  question_en       String           @db.VarChar(512)
  questionSetNumber Int
  testNumber        Int
  imgUrl            String?          @db.VarChar(512)
  comment           String?          @db.VarChar(512)
  expertComment     String?          @db.VarChar(512) @map("expert_commit")

  optionsUz        optionsUz[]
  optionsRu        optionsRu[]
  optionsEn        optionsEn[]

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model optionsUz {
  id                Int              @id @default(autoincrement())
  value             String           @db.VarChar(512)
  isCorrect         Boolean

  questionId        Int
  question          Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("options_uz")
}

model optionsRu {
  id                Int              @id @default(autoincrement())
  value             String           @db.VarChar(512)
  isCorrect         Boolean

  questionId        Int
  question          Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("options_ru")
}

model optionsEn {
  id                Int              @id @default(autoincrement())
  value             String           @db.VarChar(512)
  isCorrect         Boolean

  questionId        Int
  question          Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("options_en")
}

model banner {
  id           String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String @db.VarChar(255)
  description  String? @db.VarChar(512)
  imageUrl     String? @db.VarChar(512)
  link         String? @db.VarChar(512)
  isActive     Boolean @default(true)
  isBlocked    Boolean @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([id])
  @@map("banners")
}

enum Os {
  ANDROID
  IOS
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}
