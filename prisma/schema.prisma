generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String?
  phone      String   @unique
  email      String?  @unique
  password   String 
  countTrariff Int? @default(0) @map("count_trariff")
  role       Role     @default(USER) 
  accessDevice String? @map("access_device")
  lastAccountTranferDate DateTime? @map("last_account_tranfer_date")
  startinglDateLimit     DateTime? @map("startingl_date_limit")

  devices   Device[]
  promoCodes promoCode[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([id])
  @@unique([id, phone, email])
  @@map("users")
}

model Device {
  id         String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  os         Os
  osVersion  String?             @map("os_version")
  deviceId   String    @unique   @map("device_id")
  deviceName String?             @map("device_name")
  deviceToken String?  @unique   @map("device_token")
  isActive   Boolean   @default(true)  @map("is_active")
  isBlocked  Boolean   @default(false) @map("is_blocked")
  isRegistered Boolean @default(false) @map("is_registered") 
  manufacturer String?  
  model      String?
  appVersion String?  @map("app_version")
  appBuild   String?  @map("app_build")
  appName    String?  @map("app_name")
  appVersionCode String? @map("app_version_code")
  appVersionName String? @map("app_version_name")

  userId     String?  @db.Uuid @map("user_id")
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt  @map("updated_at")

  @@id([id])
  @@unique([id, deviceId])
  @@map("devices")
}

model Question {
  id                Int              @id @default(autoincrement())
  question_uz       String           @db.VarChar(512)
  question_ru       String           @db.VarChar(512)
  question_en       String           @db.VarChar(512)
  questionSetNumber Int
  testNumber        Int
  imgUrl            String?          @db.VarChar(512)
  comment           String?          @db.VarChar(512)
  expertComment     String?          @db.VarChar(512) @map("expert_commit")

  optionsUz        optionsUz[]
  optionsRu        optionsRu[]
  optionsEn        optionsEn[]

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model optionsUz {
  id                Int              @id @default(autoincrement())
  value             String           @db.VarChar(512)
  isCorrect         Boolean

  questionId        Int
  question          Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("options_uz")
}

model optionsRu {
  id                Int              @id @default(autoincrement())
  value             String           @db.VarChar(512)
  isCorrect         Boolean

  questionId        Int
  question          Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("options_ru")
}

model optionsEn {
  id                Int              @id @default(autoincrement())
  value             String           @db.VarChar(512)
  isCorrect         Boolean

  questionId        Int
  question          Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("options_en")
}

model banner {
  id           String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String @db.VarChar(255)
  description  String? @db.VarChar(512)
  imageUrl     String? @db.VarChar(512)
  link         String? @db.VarChar(512)
  isActive     Boolean @default(true)
  isBlocked    Boolean @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([id])
  @@map("banners")
}

model tariff {
  id           String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String @db.VarChar(255)
  day          Int   

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt      @map("updated_at")

  @@id([id])
  @@map("tariffs")
}

model promoCode {
  id           String @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  secretKey    String @db.VarChar(16) @map("secret_key")
  disCount     Int? @map("dis_count")
  bonusDays    Int? @map("bonus_days") @default(10)
  agentBonus   Int? @map("agent_bonus")

  userId     String?  @db.Uuid @map("user_id")
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade) 

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt      @map("updated_at")

  @@id([id])
  @@map("promo_code")
}

enum Os {
  ANDROID
  IOS
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}
